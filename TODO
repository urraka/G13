General
  - Consider making each module a library to include into the game.
  - Move platform.h away from system.
  - Consider moving all System stuff into sys namespace, Graphics to gfx and Math to math.
  - Add all external includes to project and all libs compiled for the different systems.
  - Attempt to add iOS/iOS-simulator to makefile and get rid of xcode project.

Networking
  - Soldier state needs animation id.
  - Add tick to every message so unordered packets can be used.
  - Add own allocation for enet.
  - Add some SoldierState and embed it inside PlayerInfo
  - Decide if server updates only when receiving data.
  / Design packet structures/format.
  / Self-contained loop with time measuring and crap in Server class.
  / Decide how to handle server (standalone, along with client, use another thread, etc).
    * Standalone, then find its way into the client.
  / Decide what object will keep all the game state (players, bullets, etc).
    * Server class will be main container (for now).

Game
  - Separate collision map from map rendering stuff.
  - Find collision bug and fix it, I FUCKING SAW IT.
  - Auto-record every fucking gameplay and store in new files with dates and shit.
  - Consider making components private with methods to access as const.

System
  - Try that clock formula.
  - iOS: callbacks for touch/movement events.
  - Switch to GLFW3 (when ready).
  - Revisit keyboard/char input stuff.

Graphics
  - Remove unnecesary includes from Graphics.h and add gfx.h as the general file to include.
  - Remove dependency with Math and System.
  - Test buffer state keeping.
  - Add Image class which loads PNG into a memory buffer.
  - Make texture class use Image class and add ability to load from buffer.
  - Add mipmaping support with glGenMipmaps and GL_GENERATE_MIPMAP or whatever (for 2.1).
  - Add text rendering.
  - Add shader type to VBO object so it binds it for you.
  - Add lineWidth method to Graphics.

Math
  - Replace using directives with typedefs.
  - Add some overflow checks in fpm functions (example: in length(), if (x.x or x.y > 175 warning! 175*175 = 30625))
  - Consider using int64 in some functions if necessary.

Archive
  x Add all messages in a Message directory and divide them in h/cpp.
  x Simplify Packet so it contains only one Message.
  x Add DataReader/DataWriter to access binary data in a network friendly way.
  x Player should be a more dedicated class. Share it between client and server?
  x Read about networking and decide what to do first.
  x Consider removing init() from Scene and initialize on constructor, assuming it's always created on the heap with new.
  x Rename Scene to State.
  x Use namespaces for states, entities and components (stt, ent, cmp).
  x Add some method to switch Game state.
  x Fix replay crashing game on release.
  x Move all debug outputs to debugger object.
  x Add global Debugger object which everyone has access to.
  x Move the debug drawing to Debugger object.
  x Think of a way to remove Debugger calls on release mode.
  x Check for room before jumping to avoid insane bouncing.
  x Add ducking.
  x Sort headers again so Graphics doesn't depend on useless stuff.
  x interpolable<T> with T previous and T current, and methods update(), update(T value) and value(float percent).
  x Move glewInit to system module to remove platform specific code in graphics module.
  x Add SoldierGraphics component.
  x Make camera take a vec2* instead of Entity*.
  x Consider Removing Entity class.
  x iOS: set statusbar orientation when orientation changed.
  x Fix not POD warnings generated by offsetof.
  x Replace bufferFlagged with pointedBuffer and call attributes functions if pointedBuffer != currentBuffer.
