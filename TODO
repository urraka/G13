Game
  - Check if the floor booleans in hull template params are still useful.
  x Find weird bug while running through gdb.
  - Check hull creation and make sure the prev/next pointers are sane (should be null if segments are not valid).
  - Show scores (kills/deaths).
  x Keep updating the game even after match ends. Reset everything when it starts.
  - Add net::GameMode base class (linked to net::Server).
  x Count kills/deaths etc.
  x Match start/end.
  - Some kind of rope (like in teeworlds).
  - Chat box (with history and crap).
  - Terminal falling velocity.
  - Multiple weapons.
  - Improve player movement.
    - Add acceleration.
    - Fix sliding in wall gaining speed after stopping.
    - Better handling of wall vs floor.
    - Friction.
  - Figure out how to generalize the character animations.
  - Maybe get rid of the interpolable object.
  - Pick different font sizes depending window width.
  - Use font size to calculate chatbox height.
  x There's no reason to have all gfx objects as pointers in net::Client.
  - Due to quantum mechanics bullets go through players when shooting from a certain position.
    ~ This is an intersection precision problem, when endpoint is very near the line.
  - Sanity check collision data and re-enable assertions on fpm::normalize.
    - Split "long" segments.
  - Make a class for the chatbox.
  x Move all the Client rendering to a separate class.
  - Think how the event system should work. Consider some minimalistic ui system.
  x Separate collision map from map rendering stuff.
  - Find ultimate solution for the collision bugs.
  - Auto-record every fucking gameplay and store in new files with dates and shit.

Networking
  x msg::PlayerConnect should tell state, health, etc.
  x Add some disconnecting state to player where it gets updated just to finish processing bullets, etc.
  - When you die and re-join might be a good time to re-sync client tick if needed.
  x Have some proper initialize, finalize stuff in Multiplayer, Client and Server.
  x Have some proper array of active players in client/server to avoid iterating MaxPlayers every time.
    ~ Setting peer-data to id could help with this.
  x Check where peer->mtu is negotiated.
  - Add some client side correcting if out of sync when needed.
    ~ Should only be needed in explosions or anything "external" that changes your physics state.
  x Move BitStream to hlp, could be useful for binary files aswell.
  x Set timeouts on both client and server.
  - Consider adding range checks on packet serialization.
  x Don't send gamestate of local player every time.
  x Remove Client::active() and make some easier to understand checks instead.
  x Set channel on message definitions.
  - Check what unsequenced means on enet. Is it reliable? Consider alternatives for gamestate.

Graphics
  - Avoid rendering invalid characters if possible.
  - Make gfx::Text upload all vertices on one go.
  - Add wrap width to gfx::Text.
  - Double buffer vbos.
  - Add ability to update specific sprites in SpriteBatch.
  - Add special case in text shader for black/white color. Fix blending.
  - Add easy to draw rectangles.
  - Text crashing with weird character 0x2584.
  - Add ability to set own mipmaps.

General
  - Consider making each module a library to include into the game.
  - Attempt to add iOS/iOS-simulator to makefile and get rid of xcode project.

System
  - Cursor clipping.
  - iOS: callbacks for touch/movement events.

Math
  - Add some overflow checks in fpm functions.
  - Consider using int64 in some functions if necessary.
  - Move constants from fixed class to fpm namespace.

Archive
  x Collision bug: run from bottom-left to the right until blocked by the "wall", then walk left.
    ~ This was on the old map (first one used in the js stuff aswell)
  x Figure how to recover from cases where client lags behind and interpolation is lost (add debug hints).
    ~ Re-syncing client tick with server on certain times might be the trick.
  x Replace network.txt with config.cfg and move it to root directory.
  x Show nicknames somewhere.
  x Add text outlines.
  x Change graphics interpolation method to account for acceleration.
    ~ This wasn't a problem actually. It was the camera's fault.
  x Store menu options (player name, host, port).
  x Lag compensation: check current RTT to decide whether to account for interpolation ticks.
  x Add some real menu. Consider removing debug menu.
  x Add some INI parsing lib.
  x Implement lag compensation.
  x Bullets may have to be kept by players.
  x Target cursor with camera movement.
  x Entity->motionBounds is a horrible function name. Think of a better one.
  x Fix bullets don't hit player when spawn point is inside of the player.
  x Map should carry some parameters (like gravity). Note: World will keep the params.
  x Add debug hints: frozen time, remote players render ticks.
  x Server asserts when client tick > server tick. Make it kill the client or something more clever.
  x The number of ticks that remote players are rendered behind is hardcoded, fix that.
  x Extrapolation [done but ugly]
  x Fix bullets going through ground when aiming down.
  x Add radian/dergees convertion to fpm.
  x Fix bullet collisions with ground (dissapears before reaching ground).
  x Switch shaders to mat3 (mat3x2 not supported on GLES2)
  x Move createBullet callback to Client/Server.
  x Entity collision can return invalid segment pointers.
  x Implement bullet-player collisions.
  x Add some kind of World where entities live to check collisions.
  x Possible bug in fpm::rect. Check header. Perhaps it's just fine.
  x Calculate min camera zoom.
  x Keep camera within map bounds.
  x Check & fix instances of for loops with i < vector.size() - 1.
  x Fix hardcoded map bounds on Bullet.cpp.
  x kGravity constant repeated in different files.
  x Maybe some refactor in collision class, is_floor() predicate is duplicated in Map and Collision.
  x Bullet tickOffsets should be set at the moment of bullet creation on server.
  x Promote Player::TimedData to net so it can be used in Servera aswell. Think of a different name.
  x Change all tick values to int to avoid unsigned shitty issues.
  x Add tick in disconnect event.
  x Remove BulletInfo from Server and add some cmp::BulletParams to carry bullet creation parameters.
  x Bullet messages should have some tick. Client should use that to create them at a proper time.
  x Add <g13/types.h> and add all forward declarations there. Include it in g13.h.
  x Don't send bullets to the player who created them.
  x New soldier animations with ability to aim at arbitrary angles.
  x Interpolate angle properly when direction changes (use shortest direction).
  x Set compression stuff.
  x Make matrix invalidation O(1), iterate shaders on a draw call.
  x Add some text metrics stuff.
  x Check if font has kerning again.
  x Test if all the refactoring works on linux/osx/ios.
  x Split keyboard event in KeyPressedEvent/KeyReleasedEvent.
  x Consider renaming events so structs are like sys::KeyPressed and type sys::KeyPressedEvent.
  x Framebuffer size vs window size.
  x Try that clock formula or use double instead.
  x Figure out how to simplify debug output.
  x Add text rendering.
    x Remove Font::Page, mix all sizes in same atlas.
    x Let atlas handle its own size and enlarging.
    x Glyph default values.
    x Check if there's a more efficient technique for copying from one texture to another.
    x Font->kerning()
    x Release atlas buffer when reaching max size.
  x Store max texture size.
    x Double check if done right.
  x Move shaders to context object.
  x Find the proper way to choose the mipmap generation method.
  x Modules: sys, gfx, math, hlp, g13.
  x Move fpm namespace inside math namespace.
  x Each directory under src/ should be named after a namespace.
  x Each module can have a general include (gfx/gfx.h, sys/sys.h, math/math.h, etc)
  x Move platform.h away from system.
  x Consider moving all System stuff into sys namespace, Graphics to gfx and Math to math.
  x Replace using directives with typedefs.
  x Add g13/math.h
  x Remove Game class and turn it into global functions in g13 namespace.
  x Move all game classes into g13 namespace.
  x Clock goes away, just do sys::time(), sys::milliseconds(), etc.
  x Add all external includes to project and all libs compiled for the different systems.
  x Massive refactoring.
  x Switch to GLFW3 (when ready).
  x Revisit keyboard/char input stuff.
  x Decide what to do with platform.h, which is needed across modules.
  x Remove unnecesary includes from Graphics.h and add gfx.h as the general file to include.
  x Remove dependency with Math and System.
  x Test buffer state keeping.
  x Add Image class which loads PNG into a memory buffer.
  x Make texture class use Image class and add ability to load from buffer.
  x Add mipmaping support with glGenMipmaps and GL_GENERATE_MIPMAP or whatever (for 2.1).
  x Add shader type to VBO object so it binds it for you.
  x Add #version when creating shader.
  x Check for GL_ES in shaders.
  x Even better, add preamble #defining lowp, etc to nothing on desktop and add precision on GLES2.
  x Add glsl step on makefile.
  x vbo/ibo -> allocate() should delete buffer and reallocate if necessary.
  x SpriteBatch might be able to share the same IBO across instances.
  x Graphics turns into global functions in gfx namespace.
  x Graphics initialization through gfx::initialize().
  x Design a better approach to handle shaders.
  x Different gfx objects not created from graphics instance anymore (just using new).
  x Add opacity to sprites.
  x Coding convention: remove identation inside namespaces.
  x Add some kind of switch to enable/disable server.
  x Messages
    x Nick
    x SpawnRequest
    x Input
    x Start
    x PlayerJoin
    x PlayerLeave
    x Gamestate
    x Spawn
  x Soldier state needs animation id.
  x Add tick to every message so unordered packets can be used.
  x Add own allocation for enet.
  x Add some SoldierState and embed it inside PlayerInfo
  x Decide if server updates only when receiving data.
  x Design packet structures/format.
  x Self-contained loop with time measuring and crap in Server class.
  x Decide how to handle server (standalone, along with client, use another thread, etc).
    ~ Standalone, then find its way into the client.
  x Decide what object will keep all the game state (players, bullets, etc).
    ~ Server class will be main container (for now).
  x Add all messages in a Message directory and divide them in h/cpp.
  x Simplify Packet so it contains only one Message.
  x Add DataReader/DataWriter to access binary data in a network friendly way.
  x Player should be a more dedicated class. Share it between client and server?
  x Read about networking and decide what to do first.
  x Consider removing init() from Scene and initialize on constructor, assuming it's always created
    on the heap with new.
  x Rename Scene to State.
  x Use namespaces for states, entities and components (stt, ent, cmp).
  x Add some method to switch Game state.
  x Fix replay crashing game on release.
  x Move all debug outputs to debugger object.
  x Add global Debugger object which everyone has access to.
  x Move the debug drawing to Debugger object.
  x Think of a way to remove Debugger calls on release mode.
  x Check for room before jumping to avoid insane bouncing.
  x Add ducking.
  x Sort headers again so Graphics doesn't depend on useless stuff.
  x interpolable<T> with T previous and T current, and methods update(), update(T value) and
    value(float percent).
  x Move glewInit to system module to remove platform specific code in graphics module.
  x Add SoldierGraphics component.
  x Make camera take a vec2* instead of Entity*.
  x Consider Removing Entity class.
  x iOS: set statusbar orientation when orientation changed.
  x Fix not POD warnings generated by offsetof.
  x Replace bufferFlagged with pointedBuffer and call attributes functions if
    pointedBuffer != currentBuffer.
